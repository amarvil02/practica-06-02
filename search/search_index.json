{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Acerca de","text":"<p>Estas en la p\u00e1gina web de Adri\u00e1n Mart\u00ednez.</p>"},{"location":"practica-01-04/","title":"IAW - Pr\u00e1ctica 01-04","text":"<p>En esta pr\u00e1ctica vamos a crear un certificado SSL/TLS autofirmado con la herramienta openssl. Una vez creado vamos a configurar el servidor web Apache para que utilice dicho certificado.</p> <p>Para esta pr\u00e1ctica tenemos un directorio conf donde habr\u00e1 dos archivos de configuraci\u00f3n de los que hablar\u00e9 posteriormente, tambi\u00e9n en el directorio scripts tenemos un archivo .env donde estar\u00e1n las variables, tenemos el script para instalar la pila LAMP (install_lamp.sh) y por \u00faltimo, el nuevo script que vamos a tener en esta pr\u00e1ctica es el setup_selfsigned_certifice.sh que nos va a permitir crear y configurar un certificado SSL autofirmado.</p> <p>Todos los archivos excepto default-ssl.conf y setup_selfsigned_certificate han sido importados de la pr\u00e1ctica 01-03, aunque en el .env las variables van a cambiar y el 000-default.conf va a tener otra configuraci\u00f3n.</p>"},{"location":"practica-01-04/#creacion-install_lampsh","title":"Creaci\u00f3n install_lamp.sh","text":"<p>Empezaremos el script con \"#!/bin/bash\", que es un indicador que le dice al sistema operativo que el script debe ser ejecutado utilizando el int\u00e9rprete de Bash.</p> <p>Tras esto, veremos tambi\u00e9n \"set -x\" que mostrar\u00e1 todos los comandos que se vayan ejecutando.</p> <p>Lo siguiente que vemos es el comando \"apt update\", el cu\u00e1l actualizar\u00e1 los repositorios. Tambi\u00e9n, tendremos el comando \"apt upgrade -y\" que actualizar\u00e1 los paquetes que hemos instalado en el anterior comando a sus \u00faltimas versiones.</p>"},{"location":"practica-01-04/#instalacion-del-servidor-web-apache","title":"Instalaci\u00f3n del servidor web Apache","text":"<p>A continuaci\u00f3n, vamos a instalar el servidor web Apache, con el comando \"apt install apache2 -y\". Aunque no est\u00e9 reflejado en el script, necesitamos unos comandos para iniciar Apache. Con el comando \"sudo systemctl start apache2\" y con el comando \"sudo systemctl enable apache2\" dejar\u00e1 activado el servidor y no se apagar\u00e1 cada vez que apaguemos la m\u00e1quina.</p>"},{"location":"practica-01-04/#instalacion-de-mysql","title":"Instalaci\u00f3n de MySQL","text":"<p>El siguiente paso en el script ser\u00e1 instalar el sistema gestor de base de datos de MySQL con el comando \"apt install mysql-server -y\", al igual que con el servidor Apache tendremos que iniciar el servidor con el comando \"sudo systemctl start mysql\" y lo dejamos habilitado con \"sudo systemctl enable mysql\". Con MySQL instalado podremos acceder a los archivos de configuraci\u00f3n en /etc/mysql/mysql.cnf, a los archivos de log en /var/log/mysql/error.log y podremos acceder a MySQL con \"sudo mysql\".</p>"},{"location":"practica-01-04/#instalacion-de-php","title":"Instalaci\u00f3n de PHP","text":"<p>Lo siguiente que tenemos ser\u00e1 la instalaci\u00f3n de PHP con sus m\u00f3dulos con el comando \"apt install php libapache2-mod-php php-mysql -y\".</p> <p>En el directorio conf que hemos importado, veremos un archivo llamado 000-default.conf para la configuraci\u00f3n de Apache. En nuestro script, copiaremos ese archivo con el comando \"cp ../conf/000-default.conf /etc/apache2/sites-available\". Tras esto, reiniciamos Apache con \"systemctl restart apache2\". El contenido de este archivo cambiar\u00e1 m\u00e1s adelante.</p> <p>Por \u00faltimo, modificamos el propietario y el grupo de los directorios de forma recursiva del directorio /var/www/html a trav\u00e9s de \"chown -R www-data:www-data /var/www/html\".</p> <p>Lo ejecutamos con sudo ./install_lamp, no necesitamos darle permisos porque ya los tendr\u00e1 de la anterior pr\u00e1ctica.</p>"},{"location":"practica-01-04/#creacion-setup_selfsigned_certificatesh","title":"Creaci\u00f3n setup_selfsigned_certificate.sh","text":"<p>Lo primero que tenemos son que las 10 primeras l\u00edneas son copiadas del install_lamp.sh que sirven para lo que he explicado en la pila LAMP.</p> <p>Antes de todo, importamos el archivo .env del cu\u00e1l las variables que vamos a configurar nos van a servir en el script dentro de unos pasos.</p> <p>A continuaci\u00f3n, vamos a crear un certificado y una clave privada con el comando:</p> <pre><code>openssl req \\\n  -x509 \\\n  -nodes \\\n  -days 365 \\\n  -newkey rsa:2048 \\\n  -keyout /etc/ssl/private/apache-selfsigned.key \\\n  -out /etc/ssl/certs/apache-selfsigned.crt \\\n  -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\"\n</code></pre> <p>Se ha utilizado la utilidad openssl con los siguientes par\u00e1metros, req que se utiliza para crear certificados autofirmados, -x509 que indica que queremos crear un certificado autofirmado en lugar de una solicitud de certificado, -nodes que hace que la clave privada del certificado no est\u00e9 protegida por contrase\u00f1a y esta sin encriptar, -days 365 que nos dice la validez del certificado, en este caso de 365 d\u00edas, -newkey rsa:2048 para generar una nueva clave privada RSA de 2048 bits junto con el certificado, -keyout /etc/ssl/private/apache-selfsigned.key para determinar la ubicaci\u00f3n y el nombre del archivo donde se guardar\u00e1 la clave privada generada, -out /etc/ssl/certs/apache-selfsigned.crt que indica el lugar y el nombre del archivo donde se guarda la clave privada que vamos a generar. Sin la \u00faltima parte del comando, cuando lo ejecutemos, nos va a pedir que introduzcamos una serie de datos que ir\u00e1n al certificado, de esta manera ser\u00eda hacerlo a mano. Para automatizar este proceso, en el .env vamos a definir las variables que necesita el certificado y lo vamos a a\u00f1adir a nuestro script con -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\", como vemos tenemos el pa\u00eds, la provincia, localidad, organizaci\u00f3n, secci\u00f3n de la organizaci\u00f3n, nombre del dominio y el email sin tener que introducirlo manualmente.</p> <p>Seguimos viendo el script, y ahora vamos a copiar el archivo de configuraci\u00f3n de Apache para HTTPS, vamos a habilitar el tr\u00e1fico de HTTPS. Su contenido tiene el siguiente significado:</p> <ul> <li>: Permite escuchar por el puerto 443 que es el de HTTPS. <li>ServerName: El nombre de dominio que asignemos.</li> <li>DocumentRoot: Ruta del directorio ra\u00edz del host virtual</li> <li>SSLEngine on: Para que se utilice SSL.</li> <li>SSLCertificateFile: La ruta del certificado que hemos autofirmado</li> <li>SSLCertificateKeyFile: La ruta de la clave privada de nuestro certificado.</li> <p>Una vez que hemos visto el default-ssl.conf, lo copiamos en nuestro script con \"cp ../conf/default-ssl.conf /etc/apache2/sites-available/\" que copiar\u00e1 el archivo de configuraci\u00f3n en /etc/apache2/sites-available/.</p> <p>Seguimos, y ahora habilitamos el virtual host para HTTPS a trav\u00e9s del comando \"a2ensite default-ssl.conf\", a2ensite sirve para eso, para habilitar un sitio web especificado que contiene un bloque VirtualHost dentro de la configuraci\u00f3n de apache2. Tambi\u00e9n, habilitamos el modulo SSL con \"a2enmod ssl\".</p>"},{"location":"practica-01-04/#configuracion-para-que-las-peticiones-a-http-se-redirijan-a-https","title":"Configuraci\u00f3n para que las peticiones a HTTP se redirijan a HTTPS","text":"<p>Vamos a configurar nuestro archivo 000-default.conf para hacer que las peticiones de HTTP se redirijan a HTTPS, el contenido de este archivo es el siguiente:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    DocumentRoot /var/www/html\n\n    # Redirige al puerto 443 (HTTPS)\n    RewriteEngine On\n    RewriteCond %{HTTPS} off\n    RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n&lt;/VirtualHost&gt;\n</code></pre> <p>Por un lado, RewriteEngine habilita el motor de reescritura de URLs y nos permite usar reglas de reescritura. RewriteCond %{HTTPS} off es una condici\u00f3n que comprueba si la petici\u00f3n recibida utiliza HTTPS o no.</p> <p>RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]: Las reglas de reescritura tienen la siguiente sintaxis RewriteRule Pattern Substitution [flags]. Esto tiene el significa de que Pattern es el patr\u00f3n que tiene que cumplirse en la URL para que la regla de reescritura se aplique, Substitution se refiere a la URL a la que se redirige la solicitud y los flags cambian el comportamiento de la regla, en este caso, indica que es una redirecci\u00f3n permanente.</p> <p>Este archivo vamos a copiarlo en el directorio /etc/apache2/sites-available, para hacerlo en nuestro script vamos a copiarlo en este directorio con el comando cp -&gt; \"cp ../conf/000-default.conf /etc/apache2/sites-available\".</p> <p>Antes de terminar nuestro script, tenemos que habilitar el m\u00f3dulo rewrite para hacer la redirecci\u00f3n de HTTP a HTTPS, \"a2enmod rewrite\" y reiniciamos el servicio de Apache \"systemctl restart apache2\".</p> <p>Para terminar, podemos configurar en el script una variable para que podamos poner cualquier dominio que queramos y no un \u00fanico dominio siempre, esta marcado como comentario porque no est\u00e1 aplicado. Para aplicarlo con el comando \"sed -i \"s//$PUT_YOUR_DOMAIN_HERE\" /etc/apache2/sites-available\" modificamos el server name para cualquier dominio y en las variables configuramos el nombre con PUT_YOUR_DOMAIN_HERE.</p> <p>Para ejecutarlo, en el terminal entramos a nuestro directorio scripts y le damos permisos al script setup_selfsigned_certificate.sh con **chmod +x setup_selfsign</p> <p></p>"},{"location":"practicas/","title":"Practicas","text":""},{"location":"practicas/#practica-01-03","title":"Practica 01-03","text":""},{"location":"practicas/#despliegue-de-una-aplicacion-web-lamp-sencilla","title":"Despliegue de una aplicaci\u00f3n web LAMP sencilla","text":"<p>En esta pr\u00e1ctica tenemos archivos importados de la pr\u00e1ctica 1, en el directorio conf est\u00e1 el archivo 000-default.conf, tambi\u00e9n tenemos en el directorio php el archivo index.php y en el directorio scripts tendremos el .env (variables distintas a la primera pr\u00e1ctica) y el script install_lamp.sh, estos archivos provienen de la primera pr\u00e1ctica. En esta pr\u00e1ctica tenemos un script nuevo llamado deploy.sh, que es el script de Bash con la automatizaci\u00f3n del proceso de instalaci\u00f3n de la aplicaci\u00f3n web LAMP.</p>"},{"location":"practicas/#creacion-install_lampsh","title":"Creaci\u00f3n install_lamp.sh","text":"<p>Empezaremos el script con \"#!/bin/bash\", que es un indicador que le dice al sistema operativo que el script debe ser ejecutado utilizando el int\u00e9rprete de Bash.</p> <p>Tras esto, veremos tambi\u00e9n \"set -x\" que mostrar\u00e1 todos los comandos que se vayan ejecutando.</p> <p>Lo siguiente que vemos es el comando \"apt update\", el cu\u00e1l actualizar\u00e1 los repositorios. Tambi\u00e9n, tendremos el comando \"apt upgrade -y\" que actualizar\u00e1 los paquetes que hemos instalado en el anterior comando a sus \u00faltimas versiones.</p>"},{"location":"practicas/#instalacion-del-servidor-web-apache","title":"Instalaci\u00f3n del servidor web Apache","text":"<p>A continuaci\u00f3n, vamos a instalar el servidor web Apache, con el comando \"apt install apache2 -y\". Aunque no est\u00e9 reflejado en el script, necesitamos unos comandos para iniciar Apache. Con el comando \"sudo systemctl start apache2\" y con el comando \"sudo systemctl enable apache2\" dejar\u00e1 activado el servidor y no se apagar\u00e1 cada vez que apaguemos la m\u00e1quina.</p>"},{"location":"practicas/#instalacion-de-mysql","title":"Instalaci\u00f3n de MySQL","text":"<p>El siguiente paso en el script ser\u00e1 instalar el sistema gestor de base de datos de MySQL con el comando \"apt install mysql-server -y\", al igual que con el servidor Apache tendremos que iniciar el servidor con el comando \"sudo systemctl start mysql\" y lo dejamos habilitado con \"sudo systemctl enable mysql\". Con MySQL instalado podremos acceder a los archivos de configuraci\u00f3n en /etc/mysql/mysql.cnf, a los archivos de log en /var/log/mysql/error.log y podremos acceder a MySQL con \"sudo mysql\".</p>"},{"location":"practicas/#instalacion-de-php","title":"Instalaci\u00f3n de PHP","text":"<p>Lo siguiente que tenemos ser\u00e1 PHP con sus m\u00f3dulos con el comando \"apt install php libapache2-mod-php php-mysql -y\". Una vez instalado PHP, tendremos en el directorio php que tenemos de la primera pr\u00e1ctica un archivo index.php en el cu\u00e1l tendremos una estructura php con el contenido phpinfo(); que nos permitir\u00e1 comprobar que la instalaci\u00f3n de PHP se ha completado con \u00e9xito, si accedes a tu direcci\u00f3n IP/info.php ver\u00e1s la p\u00e1gina con PHP.</p> <p>En el directorio conf que hemos importado, veremos un archivo llamado 000-default.conf para la configuraci\u00f3n de Apache. En nuestro script, copiaremos ese archivo con el comando \"cp ../conf/000-default.conf /etc/apache2/sites-available\".</p> <p>Tras esto, reiniciamos Apache con \"systemctl restart apache2\".</p> <p>Antes hemos visto que hemos importado el archivo index.php pero no esta implementado en nuestro script y por lo tanto, no se aplicar\u00e1. Para que funcione copiaremos este archivo en el script con el comando cp -&gt; \"cp ../php/index.php /var/www/html\".</p> <p>Por \u00faltimo, modificamos el propietario y el grupo de los directorios de forma recursiva del directorio /var/www/html a trav\u00e9s de \"chown -R www-data:www-data /var/www/html\".</p> <p>Lo ejecutamos con sudo ./install_lamp, no necesitamos darle permisos porque ya los tendr\u00e1 de la anterior pr\u00e1ctica.</p>"},{"location":"practicas/#creacion-deploysh","title":"Creaci\u00f3n deploy.sh","text":"<p>Este script, como ya he dicho, nos va a permitir la automatizaci\u00f3n del proceso de instalaci\u00f3n de la aplicaci\u00f3n web LAMP. Lo primero que tenemos en este script, son las diez primeras linea del install_lamp.sh que tendr\u00e1n la misma funci\u00f3n que en script de LAMP.</p> <p>Pero antes de actualizar, tenemos el comando \"source.env\", este comando incluye las variables que tenemos en el archivo .env que nos servir\u00e1n para configurar las variables que nos servir\u00e1n en comandos posteriores, el contenido de este archivo no es el mismo que en la primera pr\u00e1ctica, ser\u00e1:</p> <p>DB_NAME=aplicacion  DB_USER=lamp_user  DB_PASSWORD=lamp_password</p>"},{"location":"practicas/#aplicacion-web-lamp","title":"Aplicaci\u00f3n web LAMP","text":"<p>Lo siguiente que tenemos, es un comando para eliminar las descargas previas de nuestro repositorio /tmp/iaw-practica-lamp (un directorio temporal) para que cada vez que ejecutemos el script se pueda descargar la aplicaci\u00f3n de nuevo y no de problemas, utilizamos \"rm -rf /tmp/iaw-practica-lamp\".</p> <p>Una vez que hemos configurado esto, vamos a clonar un repositorio que contiene el c\u00f3digo fuente de la aplicaci\u00f3n -&gt; \"git clone https://github.com/josejuansanchez/iaw-practica-lamp.git /tmp/iaw-practica-lamp\" que tiene una base de datos y un directorio source (c\u00f3digo fuente) que contiene entre otros, el archivo config.php que configuraremos ahora y que contiene las variables.</p> <p>Tras clonar el repositorio, vamos a mover su c\u00f3digo fuente al directorio /var/www/html con el comando mv,\"mv /tmp/iaw-practica-lamp/src/* /var/www/html\". </p> <p>Ya que tenemos esto copiado, como he mencionado, dentro de aqu\u00ed est\u00e1 el archivo config.php, el siguiente paso va a ser configurar este archivo:</p> <p>sed -i \"s/database_name_here/$DB_NAME/\" /var/www/html/config.php  sed -i \"s/username_here/$DB_USER/\" /var/www/html/config.php  sed -i \"s/password_here/$DB_PASSWORD/\" /var/www/html/config.php</p> <p>Lo que acabamos de hacer es reemplazar la variables que ten\u00eda la aplicaci\u00f3n y hemos puesto las nuestras que tenemos en el archivo .env.</p> <p>Aunque hayamos configurado las variables para el nombre, el usuario y la contrase\u00f1a de la base de datos, la base de datos no puede tener cualquier nombre que le pongamos ya que se llama lamp_db para poder cambiarselo utilizamos de nuevo el comando sed:</p> <p>sed -i \"s/lamp_db/$DB_NAME/\" /tmp/iaw-practica-lamp/db/database.sql</p> <p>Una vez realizada toda la configuraci\u00f3n, vamos a importar el script de la base de datos con el comando \"mysql -u root &lt; /tmp/iaw-practica-lamp/db/database.sql\". Tambi\u00e9n, vamos a crear el usuario de la base de datos asignandole privilegios:</p> <p>mysql -u root &lt;&lt;&lt; \"DROP USER IF EXISTS $DB_USER@'%'\"  mysql -u root &lt;&lt;&lt; \"CREATE USER $DB_USER@'%' IDENTIFIED BY '$DB_PASSWORD'\"  mysql -u root &lt;&lt;&lt; \"GRANT ALL PRIVILEGES ON $DB_NAME.* TO $DB_USER@'%'\"</p> <p>Este comando lo que hace es, primero eliminar usuario si existe el usuario que tenemos en nuestra variable. Tambi\u00e9n, crea usuario identificado por la contrase\u00f1a asignada en la variable y da todos los privilegios al usuario sobre la base de datos.</p> <p>Para terminar, como siempre, modificamos el grupo y el propietario de /var/www/html con \"chown -R www-data:www-data /var/www/html\".</p>"},{"location":"practicas/#iaw-practica-01-04","title":"IAW - Pr\u00e1ctica 01-04","text":"<p>En esta pr\u00e1ctica vamos a crear un certificado SSL/TLS autofirmado con la herramienta openssl. Una vez creado vamos a configurar el servidor web Apache para que utilice dicho certificado.</p> <p>Para esta pr\u00e1ctica tenemos un directorio conf donde habr\u00e1 dos archivos de configuraci\u00f3n de los que hablar\u00e9 posteriormente, tambi\u00e9n en el directorio scripts tenemos un archivo .env donde estar\u00e1n las variables, tenemos el script para instalar la pila LAMP (install_lamp.sh) y por \u00faltimo, el nuevo script que vamos a tener en esta pr\u00e1ctica es el setup_selfsigned_certifice.sh que nos va a permitir crear y configurar un certificado SSL autofirmado.</p> <p>Todos los archivos excepto default-ssl.conf y setup_selfsigned_certificate han sido importados de la pr\u00e1ctica 01-03, aunque en el .env las variables van a cambiar y el 000-default.conf va a tener otra configuraci\u00f3n.</p>"},{"location":"practicas/#creacion-install_lampsh_1","title":"Creaci\u00f3n install_lamp.sh","text":"<p>Empezaremos el script con \"#!/bin/bash\", que es un indicador que le dice al sistema operativo que el script debe ser ejecutado utilizando el int\u00e9rprete de Bash.</p> <p>Tras esto, veremos tambi\u00e9n \"set -x\" que mostrar\u00e1 todos los comandos que se vayan ejecutando.</p> <p>Lo siguiente que vemos es el comando \"apt update\", el cu\u00e1l actualizar\u00e1 los repositorios. Tambi\u00e9n, tendremos el comando \"apt upgrade -y\" que actualizar\u00e1 los paquetes que hemos instalado en el anterior comando a sus \u00faltimas versiones.</p>"},{"location":"practicas/#instalacion-del-servidor-web-apache_1","title":"Instalaci\u00f3n del servidor web Apache","text":"<p>A continuaci\u00f3n, vamos a instalar el servidor web Apache, con el comando \"apt install apache2 -y\". Aunque no est\u00e9 reflejado en el script, necesitamos unos comandos para iniciar Apache. Con el comando \"sudo systemctl start apache2\" y con el comando \"sudo systemctl enable apache2\" dejar\u00e1 activado el servidor y no se apagar\u00e1 cada vez que apaguemos la m\u00e1quina.</p>"},{"location":"practicas/#instalacion-de-mysql_1","title":"Instalaci\u00f3n de MySQL","text":"<p>El siguiente paso en el script ser\u00e1 instalar el sistema gestor de base de datos de MySQL con el comando \"apt install mysql-server -y\", al igual que con el servidor Apache tendremos que iniciar el servidor con el comando \"sudo systemctl start mysql\" y lo dejamos habilitado con \"sudo systemctl enable mysql\". Con MySQL instalado podremos acceder a los archivos de configuraci\u00f3n en /etc/mysql/mysql.cnf, a los archivos de log en /var/log/mysql/error.log y podremos acceder a MySQL con \"sudo mysql\".</p>"},{"location":"practicas/#instalacion-de-php_1","title":"Instalaci\u00f3n de PHP","text":"<p>Lo siguiente que tenemos ser\u00e1 la instalaci\u00f3n de PHP con sus m\u00f3dulos con el comando \"apt install php libapache2-mod-php php-mysql -y\".</p> <p>En el directorio conf que hemos importado, veremos un archivo llamado 000-default.conf para la configuraci\u00f3n de Apache. En nuestro script, copiaremos ese archivo con el comando \"cp ../conf/000-default.conf /etc/apache2/sites-available\". Tras esto, reiniciamos Apache con \"systemctl restart apache2\". El contenido de este archivo cambiar\u00e1 m\u00e1s adelante.</p> <p>Por \u00faltimo, modificamos el propietario y el grupo de los directorios de forma recursiva del directorio /var/www/html a trav\u00e9s de \"chown -R www-data:www-data /var/www/html\".</p> <p>Lo ejecutamos con sudo ./install_lamp, no necesitamos darle permisos porque ya los tendr\u00e1 de la anterior pr\u00e1ctica.</p>"},{"location":"practicas/#creacion-setup_selfsigned_certificatesh","title":"Creaci\u00f3n setup_selfsigned_certificate.sh","text":"<p>Lo primero que tenemos son que las 10 primeras l\u00edneas son copiadas del install_lamp.sh que sirven para lo que he explicado en la pila LAMP.</p> <p>Antes de todo, importamos el archivo .env del cu\u00e1l las variables que vamos a configurar nos van a servir en el script dentro de unos pasos.</p> <p>A continuaci\u00f3n, vamos a crear un certificado y una clave privada con el comando:</p> <pre><code>openssl req \\\n  -x509 \\\n  -nodes \\\n  -days 365 \\\n  -newkey rsa:2048 \\\n  -keyout /etc/ssl/private/apache-selfsigned.key \\\n  -out /etc/ssl/certs/apache-selfsigned.crt \\\n  -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\"\n</code></pre> <p>Se ha utilizado la utilidad openssl con los siguientes par\u00e1metros, req que se utiliza para crear certificados autofirmados, -x509 que indica que queremos crear un certificado autofirmado en lugar de una solicitud de certificado, -nodes que hace que la clave privada del certificado no est\u00e9 protegida por contrase\u00f1a y esta sin encriptar, -days 365 que nos dice la validez del certificado, en este caso de 365 d\u00edas, -newkey rsa:2048 para generar una nueva clave privada RSA de 2048 bits junto con el certificado, -keyout /etc/ssl/private/apache-selfsigned.key para determinar la ubicaci\u00f3n y el nombre del archivo donde se guardar\u00e1 la clave privada generada, -out /etc/ssl/certs/apache-selfsigned.crt que indica el lugar y el nombre del archivo donde se guarda la clave privada que vamos a generar. Sin la \u00faltima parte del comando, cuando lo ejecutemos, nos va a pedir que introduzcamos una serie de datos que ir\u00e1n al certificado, de esta manera ser\u00eda hacerlo a mano. Para automatizar este proceso, en el .env vamos a definir las variables que necesita el certificado y lo vamos a a\u00f1adir a nuestro script con -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\", como vemos tenemos el pa\u00eds, la provincia, localidad, organizaci\u00f3n, secci\u00f3n de la organizaci\u00f3n, nombre del dominio y el email sin tener que introducirlo manualmente.</p> <p>Seguimos viendo el script, y ahora vamos a copiar el archivo de configuraci\u00f3n de Apache para HTTPS, vamos a habilitar el tr\u00e1fico de HTTPS. Su contenido tiene el siguiente significado:</p> <ul> <li>: Permite escuchar por el puerto 443 que es el de HTTPS. <li>ServerName: El nombre de dominio que asignemos.</li> <li>DocumentRoot: Ruta del directorio ra\u00edz del host virtual</li> <li>SSLEngine on: Para que se utilice SSL.</li> <li>SSLCertificateFile: La ruta del certificado que hemos autofirmado</li> <li>SSLCertificateKeyFile: La ruta de la clave privada de nuestro certificado.</li> <p>Una vez que hemos visto el default-ssl.conf, lo copiamos en nuestro script con \"cp ../conf/default-ssl.conf /etc/apache2/sites-available/\" que copiar\u00e1 el archivo de configuraci\u00f3n en /etc/apache2/sites-available/.</p> <p>Seguimos, y ahora habilitamos el virtual host para HTTPS a trav\u00e9s del comando \"a2ensite default-ssl.conf\", a2ensite sirve para eso, para habilitar un sitio web especificado que contiene un bloque VirtualHost dentro de la configuraci\u00f3n de apache2. Tambi\u00e9n, habilitamos el modulo SSL con \"a2enmod ssl\".</p>"},{"location":"practicas/#configuracion-para-que-las-peticiones-a-http-se-redirijan-a-https","title":"Configuraci\u00f3n para que las peticiones a HTTP se redirijan a HTTPS","text":"<p>Vamos a configurar nuestro archivo 000-default.conf para hacer que las peticiones de HTTP se redirijan a HTTPS, el contenido de este archivo es el siguiente:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    DocumentRoot /var/www/html\n\n    # Redirige al puerto 443 (HTTPS)\n    RewriteEngine On\n    RewriteCond %{HTTPS} off\n    RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n&lt;/VirtualHost&gt;\n</code></pre> <p>Por un lado, RewriteEngine habilita el motor de reescritura de URLs y nos permite usar reglas de reescritura. RewriteCond %{HTTPS} off es una condici\u00f3n que comprueba si la petici\u00f3n recibida utiliza HTTPS o no.</p> <p>RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]: Las reglas de reescritura tienen la siguiente sintaxis RewriteRule Pattern Substitution [flags]. Esto tiene el significa de que Pattern es el patr\u00f3n que tiene que cumplirse en la URL para que la regla de reescritura se aplique, Substitution se refiere a la URL a la que se redirige la solicitud y los flags cambian el comportamiento de la regla, en este caso, indica que es una redirecci\u00f3n permanente.</p> <p>Este archivo vamos a copiarlo en el directorio /etc/apache2/sites-available, para hacerlo en nuestro script vamos a copiarlo en este directorio con el comando cp -&gt; \"cp ../conf/000-default.conf /etc/apache2/sites-available\".</p> <p>Antes de terminar nuestro script, tenemos que habilitar el m\u00f3dulo rewrite para hacer la redirecci\u00f3n de HTTP a HTTPS, \"a2enmod rewrite\" y reiniciamos el servicio de Apache \"systemctl restart apache2\".</p> <p>Para terminar, podemos configurar en el script una variable para que podamos poner cualquier dominio que queramos y no un \u00fanico dominio siempre, esta marcado como comentario porque no est\u00e1 aplicado. Para aplicarlo con el comando \"sed -i \"s//$PUT_YOUR_DOMAIN_HERE\" /etc/apache2/sites-available\" modificamos el server name para cualquier dominio y en las variables configuramos el nombre con PUT_YOUR_DOMAIN_HERE.</p> <p>Para ejecutarlo, en el terminal entramos a nuestro directorio scripts y le damos permisos al script setup_selfsigned_certificate.sh con **chmod +x setup_selfsign</p>"}]}